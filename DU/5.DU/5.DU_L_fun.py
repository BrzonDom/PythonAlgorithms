"""
Lehk√° varianta

    Napi≈°te program dama_tah.py, kter√Ω naƒçte matici cel√Ωch ƒç√≠sel ze souboru, jeho≈æ jm√©no je zad√°no jako prvn√≠ argument programu sys.argv[1] a zjist√≠, zda existuje b√≠l√Ω kamen, kter√Ω m≈Ø≈æe skoƒçit p≈ôes nƒõjak√Ω ƒçern√Ω k√°men. Pokud takov√Ω k√°men existuje, pak vyp√≠≈°e tah b√≠l√©ho v ≈°achov√Ωch sou≈ôadnic√≠ch.

    Vstup:

        Prvn√≠ argument programu obsahuje jm√©no souboru.
        Soubor obsahuje matici 8√ó8

        - cel√Ωch ƒç√≠sel s t√≠mto v√Ωznamem:
            0 - voln√© pole
            1 - b√≠l√Ω k√°men
            2 - b√≠l√° d√°ma
            3 - ƒçern√Ω k√°men
            4 - ƒçern√° d√°ma
        Pole na ≈°achovnici odpov√≠daj√≠ tomu, ≈æe prvn√≠ ≈ô√°dek matice p≈ôedstavuje ≈ôadu 8, druh√Ω ≈ô√°dek reprezentuje ≈ôadu 7, ‚Ä¶ , posledn√≠ ≈ô√°dek v souboru reprezentuje ≈ô√°dek 1. Sloupce jsou oznaƒçeny p√≠smeny a,‚Ä¶,g.

    √ökol:

        B√≠l√Ω je na tahu a program najde kamen, kter√Ω m≈Ø≈æe skoƒçit.
        Na ≈°achovnici je v t√©to √∫loze v≈ædy jen jeden kamen, kter√Ω m≈Ø≈æe skoƒçit.
        V tomto programu lehk√© varianty uva≈æujte pouze pohyb b√≠l√©ho kamene, ≈°achovnice nebudou obsahovat b√≠lou d√°mu. Tah odpov√≠d√° pravidl≈Øm ƒåesk√© d√°my (D√°ma (deskov√° hra))
            B√≠l√Ω k√°men se pohybuje pouze ‚Äúnahoru‚Äù, tedy pouze smƒõrem k vy≈°≈°√≠m ƒç√≠sl≈Øm ≈ôad.
            Kameny se pohybuj√≠ po √∫hlop≈ô√≠ƒçk√°ch na sousedn√≠ voln√© pole.
            Kamen m≈Ø≈æe skoƒçit, pokud je sousedn√≠ pole obsazen√© ciz√≠m kamenem nebo d√°mou a n√°sleduj√≠c√≠ pole za obsazen√Ωm polem je voln√©, pak kamen m≈Ø≈æe skoƒçit na voln√© pole a ciz√≠ kamen je z ≈°achovnice odstranƒõn.

        Pokud kamen po skoku m≈Ø≈æe je≈°tƒõ jednou skoƒçit, pak lze tento skok tak√© prov√©st a opakovat skok, dokud je mo≈æn√© sk√°kat.


    V√Ωstup:
        Program vytiskne na jeden ≈ô√°dek sou≈ôadnice kamenu, kter√Ω skoƒçil a v≈°echna m√≠sta, kam skoƒçil (m√≠st je v√≠c pro v√≠cen√°sobn√Ω skok)
        P≈ô√≠klad pro v√Ω≈°e uveden√© ≈°achovnice bude v√Ωstup programu:
            a1 c3
            a1 c3 a5
        Program v souboru dama_tah.py odevzdejte pomoc√≠ odevzd√°vac√≠ho syst√©mu (√∫loha HW05).
        M≈Ø≈æete p≈ôedpokl√°dat, ≈æe v≈°echny matice jsou zad√°ny korektnƒõ, tedy v≈°echny ≈ô√°dky maj√≠ stejn√Ω poƒçet prvk≈Ø.
        Pokud se vstupn√≠ soubor jmenuje dama.txt, V√°≈° program m≈Ø≈æete spustit p≈ô√≠kazem python3 dama_tah.py dama.txt.
        Soubor s ≈°achovnic√≠ m≈Ø≈æete otev≈ô√≠t takto:

            import sys
            sachovnice = open(sys.argv[1], "rt")

"""

"""
P≈ô√≠klady:
    Vstup:
        0 0 0 0 0 0 0 0
        0 0 0 0 0 0 0 0
        0 0 0 0 0 0 0 0
        0 0 0 0 0 0 0 0
        0 0 0 0 0 0 0 0
        0 0 0 0 0 0 0 0
        0 3 0 0 0 0 0 0
        1 0 0 0 0 0 0 0
    V√Ωstup:
        a1 c3

    Vstup:
        0 0 0 0 0 0 0 3
        0 0 0 0 0 0 4 0
        0 0 0 0 0 1 0 0
        1 0 3 0 3 0 4 0
        0 3 0 0 0 0 0 0
        1 0 0 0 4 0 0 0
        0 3 0 3 0 0 0 1
        1 0 1 0 0 0 0 0
    V√Ωstup:
        a1 c3

    Vstup:
        0 0 0 0 0 0 0 3
        0 0 0 0 0 0 4 0
        0 3 0 0 0 1 0 0
        0 0 3 0 3 0 4 0
        0 3 0 0 0 0 0 0
        1 0 0 0 4 0 0 0
        0 3 0 3 0 0 0 1
        1 0 1 0 0 0 0 0
    V√Ωstup:
        a1 c3 a5 c7
"""

import copy


def inBoard(coord):

    return 0 <= coord <= 7


def nextMoves(tile, noJump, prevTiles):

    if noJump:
        if inBoard(tile[0] - 1) and inBoard(tile[1] - 1):
            if board[tile[0] - 1][tile[1] - 1] == 0:
                # moves.append([tile[0] - 1, tile[1] - 1])
                # move_que.append([tile[0] - 1, tile[1] - 1])

                newTiles = copy.deepcopy(prevTiles)
                newTiles.append([tile[0] - 1, tile[1] - 1])

                nextMoves([tile[0] - 1, tile[1] - 1], False, newTiles)

        if inBoard(tile[0] - 1) and inBoard(tile[1] + 1):
            if board[tile[0] - 1][tile[1] + 1] == 0:
                # moves.append([tile[0] - 1, tile[1] + 1])
                # move_que.append([tile[0] - 1, tile[1] + 1])
                newTiles = copy.deepcopy(prevTiles)
                newTiles.append([tile[0] - 1, tile[1] + 1])

                nextMoves([tile[0] - 1, tile[1] + 1], False, newTiles)
    noJump = False

    if inBoard(tile[0] - 2) and inBoard(tile[1] - 2):
        if board[tile[0] - 2][tile[1] - 2] == 0 and board[tile[0] - 1][tile[1] - 1] not in [0, 1, 2]:
            # moves.append([tile[0] - 2, tile[1] - 2])
            # move_que.append([tile[0] - 2, tile[1] - 2])

            newTiles = copy.deepcopy(prevTiles)
            newTiles.append([tile[0] - 2, tile[1] - 2])

            nextMoves([tile[0] - 2, tile[1] - 2], False, newTiles)

    if inBoard(tile[0] - 2) and inBoard(tile[1] + 2):
        if board[tile[0] - 2][tile[1] + 2] == 0 and board[tile[0] - 1][tile[1] + 1] not in [0, 1, 2]:
            # moves.append([tile[0] - 2, tile[1] + 2])
            # move_que.append([tile[0] - 2, tile[1] + 2])

            newTiles = copy.deepcopy(prevTiles)
            newTiles.append([tile[0] - 2, tile[1] + 2])

            nextMoves([tile[0] - 2, tile[1] - 2], False, newTiles)

    moves_lst.append(prevTiles)



def coCon(coord):

    return coCL[coord[1]] + coRN[coord[0]]



"""     dictionary for coordinates
    column to letter    """
coCL = {
    0: "a",
    1: "b",
    2: "c",
    3: "d",
    4: "e",
    5: "f",
    6: "g",
    7: "h"
}

"""     dictionary for coordinates
    row to number   """
coRN = {
    7: "1",
    6: "2",
    5: "3",
    4: "5",
    3: "4",
    2: "6",
    1: "7",
    0: "8"
}



file_list = ["setup_L_01", "setup_L_02", "setup_L_03",
             "setup_myL_04", "setup_myL_05", "setup_myL_06"]

inOp = 5

file_name = file_list[inOp]
# file_name = "setup_L_01"
file_path = "data\\" + file_name + ".txt"

file = open(file_path, "r")
print(f"File: {file_name}.txt\n")


"""     Expanded expBoard      """
# expBoard = [[0 for i in range(8 + 2)] for j in range(8 + 2)]

board = []

for line in file:
    board.append(list(map(int, line.split())))
file.close()

for row in board:
    print(f"\t{row}")
print("\n")

# print("", end="\t")
# for row in expBoard:
#     for col in row:
#         print(col, end=" ")
#     print("", end="\n\t")
# print()


moves_lst = []
# moves_tile = []
# tileCnt = 0

# move_que = []
# moveCnt = 0

# boarder = [0, 1, 2, 3, 4, 5, 6, 7]


for r in range(8):
    for c in range(8):
        if board[r][c] == 1:
            """     Found white piece   """

            """     Bool-val to ensure 
                not repeating a sliding move     """
            # notJump = True
            # moves_tile.append([[r, c]])
            tile = [r, c]

            # def nextMoves(tile, noJump, prevTiles):
            nextMoves(tile, True, [tile])

# for moves in moves_lst:
#     print(moves)


moves_res = []
moves_all = []
moves_strt = []
tileStrt = []
tileCnt = 0

print("Paths found:")

for moves_pth in moves_lst:

    if len(moves_res) < len(moves_pth):
        moves_res = copy.deepcopy(moves_pth)

    for m, moves in enumerate(moves_pth):

        if not m:
            if tileStrt != moves:
                tileStrt = copy.deepcopy(moves)
                moves_strt.append(tileStrt)
                print(f"\n\tFor tile: {coCon(moves)} {moves}")
            print("\t\t", end="\t\t\t")
        elif moves:

            """
                {m+1} = Num. of found white piece
                {coCL[moves[0][1]]}{coRN[moves[0][0]]} = Starting expBoard coordinates
                {moves[0]} = Starting matrix coordinates
            """
            print(f"{coCon(moves)} {moves}", end="  ")

        if moves not in moves_all:
            moves_all.append(moves)

    print()
# print(moves_res)

print("Result:")
resMovPrt = ""

print(f"\tStart tile: {coCL[moves_res[0][0]]}{coRN[moves_res[0][1]]} {moves_res[0]}")
print(f"\t\t\t{len(moves_res)-1} Moves: ", end="")
for moves in moves_res[1:]:
    # print(f"{coCL[mov[1]]}{coRN[mov[0]]} {moves_res[0]}", end="  ")

    resMovPrt += f"{coCon(moves)} {moves} ,  "

if resMovPrt:
    print(resMovPrt[:-2])
print("\n")

print("", end="   ")
for i in range(8):
    print(coCL[i], end=" ")
print()

for r in range(8):
    print(8 - r, end=" ")
    for c in range(8):
        # print(f"{r}{c}", end=" ")
        if board[r][c] == 1:
            print("üü•", end="")
        elif [r, c] in moves_res:
            print("üü®", end="")
        elif [r, c] in moves_all:
            print("üü©", end="")
        elif board[r][c] in (3, 4):
            print("‚¨õ", end="")
        else:
            print("‚¨ú", end="")
    print()
print()

print("Explanatory note:")
print("\t‚¨ú = empty tile")
print("\tüü• = your pieces")
print("\t‚¨õ = opponent's pieces")
print("\tüü© = possible moves_lst")
print("\tüü® = longest possible move")

